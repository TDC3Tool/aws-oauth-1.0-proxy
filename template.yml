AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: aws-oauth-1.0-proxy
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
Resources:
  BasicOAuthLambdaExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Basic Lambda Execution for the aws-oauth-1.0-proxy lambdas.
      ManagedPolicyName: basic-oauth-lambda-execution-managed-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ]
            Effect: Allow
            Resource: "arn:aws:logs:*:*:*"
          - Action: "sns:Publish"
            Effect: "Allow"
            Resource: "*"
  OAuthFirstLegLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
      Description: OAuth First Leg Lambda Function
      FunctionName: oauth-first-leg
      Handler: app.firstLegHandler
      Policies:
        - !Ref BasicOAuthLambdaExecutionPolicy
        - !ImportValue SharedSecurity-PipelineKeyDecryptPolicyArn
      Runtime: nodejs10.x
      Timeout: 30
      MemorySize: 256
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /firstLegAuth
            Method: post
      Environment:
        Variables:
          CLIENT_KEY:
          CLIENT_SECRET:
          API_URL:
          OAUTH_CUSTOM_HEADERS:
          AUTHORIZE_CALLBACK_URI:
          SNS_SUCCESS_ARN:
          SNS_NONSUCCESS_ARN:
  OAuthSignRequestPostLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
      Description: OAuth Sign Request Post Lambda Function
      FunctionName: oauth-sign-request-post
      Handler: app.oAuthSignRequestPost
      Policies:
        - !Ref BasicOAuthLambdaExecutionPolicy
        - !ImportValue SharedSecurity-PipelineKeyDecryptPolicyArn
      Runtime: nodejs10.x
      Timeout: 30
      MemorySize: 256
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /oAuthSignRequest
            Method: post
      Environment:
        Variables:
          CLIENT_KEY:
          CLIENT_SECRET:
          API_URL:
          OAUTH_CUSTOM_HEADERS:
          AUTHORIZE_CALLBACK_URI:
          SNS_SUCCESS_ARN:
          SNS_NONSUCCESS_ARN:
  OAuthSignRequestGetLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
      Description: OAuth Sign Request Get Lambda Function
      FunctionName: oauth-sign-request-get
      Handler: app.oAuthSignRequestGet
      Policies:
        - !Ref BasicOAuthLambdaExecutionPolicy
        - !ImportValue SharedSecurity-PipelineKeyDecryptPolicyArn
      Runtime: nodejs10.x
      Timeout: 30
      MemorySize: 256
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /oAuthSignRequest
            Method: get
      Environment:
        Variables:
          CLIENT_KEY:
          CLIENT_SECRET:
          API_URL:
          OAUTH_CUSTOM_HEADERS:
          AUTHORIZE_CALLBACK_URI:
          SNS_SUCCESS_ARN:
          SNS_NONSUCCESS_ARN:
  OAuthSignRequestDeleteLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
      Description: OAuth Sign Request Delete Lambda Function
      FunctionName: oauth-sign-request-delete
      Handler: app.oAuthSignRequestDelete
      Policies:
        - !Ref BasicOAuthLambdaExecutionPolicy
        - !ImportValue SharedSecurity-PipelineKeyDecryptPolicyArn
      Runtime: nodejs10.x
      Timeout: 30
      MemorySize: 256
      Events:
        DeleteResource:
          Type: Api
          Properties:
            Path: /oAuthSignRequest
            Method: delete
      Environment:
        Variables:
          CLIENT_KEY:
          CLIENT_SECRET:
          API_URL:
          OAUTH_CUSTOM_HEADERS:
          AUTHORIZE_CALLBACK_URI:
          SNS_SUCCESS_ARN:
          SNS_NONSUCCESS_ARN:
  SuccessTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: aws-auth-success-topic
      TopicName: aws-auth-success-topic
  FailTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: aws-auth-failed-topic
      TopicName: aws-auth-failed-topic
Outputs:
  ApiURL:
    Description: API endpoint for the lambdas
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
